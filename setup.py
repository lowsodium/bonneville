#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
The setup script for bonneville
'''

# For Python 2.5.  A no-op on 2.6 and above.
from __future__ import with_statement

import os
import sys
import glob
from datetime import datetime
from distutils.cmd import Command
from distutils.command.build import build
from distutils.command.clean import clean
from distutils.command.sdist import sdist

# Change to bonneville source's directory prior to running any command
try:
    SETUP_DIRNAME = os.path.dirname(__file__)
except NameError:
    # We're most likely being frozen and __file__ triggered this NameError
    # Let's work around that
    SETUP_DIRNAME = os.path.dirname(sys.argv[0])

if SETUP_DIRNAME != '':
    os.chdir(SETUP_DIRNAME)

SETUP_DIRNAME = os.path.abspath(SETUP_DIRNAME)

# Store a reference to the executing platform
IS_WINDOWS_PLATFORM = sys.platform.startswith('win')

# Use setuptools only if the user opts-in by setting the USE_SETUPTOOLS env var
# Or if setuptools was previously imported (which is the case when using
# 'distribute')
# This ensures consistent behavior but allows for advanced usage with
# virtualenv, buildout, and others.
WITH_SETUPTOOLS = False
if 'USE_SETUPTOOLS' in os.environ or 'setuptools' in sys.modules:
    try:
        from setuptools import setup
        from setuptools.command.install import install
        from setuptools.command.sdist import sdist
        WITH_SETUPTOOLS = True
    except ImportError:
        WITH_SETUPTOOLS = False

if WITH_SETUPTOOLS is False:
    import warnings
    from distutils.command.install import install
    from distutils.core import setup
    warnings.filterwarnings(
        'ignore',
        'Unknown distribution option: \'(tests_require|install_requires|zip_safe)\'',
        UserWarning,
        'distutils.dist'
    )

try:
    # Add the esky bdist target if the module is available
    # may require additional modules depending on platform
    from esky import bdist_esky
    # bbfreeze chosen for its tight integration with distutils
    import bbfreeze
    HAS_ESKY = True
except ImportError:
    HAS_ESKY = False

BONNEVILLE_VERSION = os.path.join(
    os.path.abspath(SETUP_DIRNAME), 'bonneville', 'version.py'
)

BONNEVILLE_REQS = os.path.join(
    os.path.abspath(SETUP_DIRNAME), 'requirements.txt'
)

BONNEVILLE_SYSPATHS = os.path.join(
    os.path.abspath(SETUP_DIRNAME), 'bonneville', 'syspaths.py'
)

exec(compile(open(BONNEVILLE_VERSION).read(), BONNEVILLE_VERSION, 'exec'))
exec(compile(open(BONNEVILLE_SYSPATHS).read(), BONNEVILLE_SYSPATHS, 'exec'))


class SaltSdist(sdist):
    def write_manifest(self):
        if IS_WINDOWS_PLATFORM:
            # Remove un-necessary scripts grabbed by MANIFEST.in
            for filename in self.filelist.files[:]:
                if filename in ('scripts/bonneville',
                                'scripts/bonneville-cloud',
                                'scripts/bonneville-key',
                                'scripts/bonneville-master',
                                'scripts/bonneville-run',
                                'scripts/bonneville-ssh',
                                'scripts/bonneville-syndic'):
                    self.filelist.files.pop(
                        self.filelist.files.index(filename)
                    )
        return sdist.write_manifest(self)


class TestCommand(Command):
    description = 'Run tests'
    user_options = [
        ('runtests-opts=', 'R', 'Command line options to pass to runtests.py')
    ]

    def initialize_options(self):
        self.runtests_opts = None

    def finalize_options(self):
        pass

    def run(self):
        from subprocess import Popen
        self.run_command('build')
        build_cmd = self.get_finalized_command('build_ext')
        runner = os.path.abspath('tests/runtests.py')
        test_cmd = sys.executable + ' {0}'.format(runner)
        if self.runtests_opts:
            test_cmd += ' {0}'.format(self.runtests_opts)

        print('running test')
        test_process = Popen(
            test_cmd, shell=True,
            stdout=sys.stdout, stderr=sys.stderr,
            cwd=build_cmd.build_lib
        )
        test_process.communicate()
        sys.exit(test_process.returncode)


class Clean(clean):
    def run(self):
        clean.run(self)
        # Let's clean compiled *.py[c,o]
        remove_extensions = ('.pyc', '.pyo')
        for subdir in ('bonneville', 'tests', 'doc'):
            root = os.path.join(os.path.dirname(__file__), subdir)
            for dirname, dirnames, filenames in os.walk(root):
                for to_remove_filename in glob.glob(
                        '{0}/*.py[oc]'.format(dirname)):
                    os.remove(to_remove_filename)


INSTALL_VERSION_TEMPLATE = '''\
# This file was auto-generated by bonneville's setup on \
{date:%A, %d %B %Y @ %H:%m:%S UTC}.

__version__ = {version!r}
__version_info__ = {version_info!r}
'''


INSTALL_SYSPATHS_TEMPLATE = '''\
# This file was auto-generated by bonneville's setup on \
{date:%A, %d %B %Y @ %H:%m:%S UTC}.

ROOT_DIR = {root_dir!r}
CONFIG_DIR = {config_dir!r}
CACHE_DIR = {cache_dir!r}
SOCK_DIR = {sock_dir!r}
SRV_ROOT_DIR= {srv_root_dir!r}
BASE_FILE_ROOTS_DIR = {base_file_roots_dir!r}
BASE_PILLAR_ROOTS_DIR = {base_pillar_roots_dir!r}
BASE_MASTER_ROOTS_DIR = {base_master_roots_dir!r}
LOGS_DIR = {logs_dir!r}
PIDFILE_DIR = {pidfile_dir!r}
'''


class Build(build):
    def run(self):
        # Run build.run function
        build.run(self)
        if getattr(self.distribution, 'running_bonneville', False):
            # If our install attribute is present and set to True, we'll go
            # ahead and write our install time python modules.

            # Write the version file
            version_file_path = os.path.join(
                self.build_lib, 'bonneville', '_version.py'
            )
            open(version_file_path, 'w').write(
                INSTALL_VERSION_TEMPLATE.format(
                    date=datetime.utcnow(),
                    version=__version__,
                    version_info=__version_info__
                )
            )

            # Write the system paths file
            system_paths_file_path = os.path.join(
                self.build_lib, 'bonneville', '_syspaths.py'
            )
            open(system_paths_file_path, 'w').write(
                INSTALL_SYSPATHS_TEMPLATE.format(
                    date=datetime.utcnow(),
                    root_dir=self.distribution.bonneville_root_dir,
                    config_dir=self.distribution.bonneville_config_dir,
                    cache_dir=self.distribution.bonneville_cache_dir,
                    sock_dir=self.distribution.bonneville_sock_dir,
                    srv_root_dir=self.distribution.bonneville_srv_root_dir,
                    base_file_roots_dir=self.distribution.bonneville_base_file_roots_dir,
                    base_pillar_roots_dir=self.distribution.bonneville_base_pillar_roots_dir,
                    base_master_roots_dir=self.distribution.bonneville_base_master_roots_dir,
                    logs_dir=self.distribution.bonneville_logs_dir,
                    pidfile_dir=self.distribution.bonneville_pidfile_dir,
                )
            )


class Install(install):
    user_options = install.user_options + [
        ('bonneville-root-dir=', None,
         'Salt\'s pre-configured root directory'),
        ('bonneville-config-dir=', None,
         'Salt\'s pre-configured configuration directory'),
        ('bonneville-cache-dir=', None,
         'Salt\'s pre-configured cache directory'),
        ('bonneville-sock-dir=', None,
         'Salt\'s pre-configured socket directory'),
        ('bonneville-srv-root-dir=', None,
         'Salt\'s pre-configured service directory'),
        ('bonneville-base-file-roots-dir=', None,
         'Salt\'s pre-configured file roots directory'),
        ('bonneville-base-pillar-roots-dir=', None,
         'Salt\'s pre-configured pillar roots directory'),
        ('bonneville-base-master-roots-dir=', None,
         'Salt\'s pre-configured master roots directory'),
        ('bonneville-logs-dir=', None,
         'Salt\'s pre-configured logs directory'),
        ('bonneville-pidfile-dir=', None,
         'Salt\'s pre-configured pidfiles directory'),
    ]

    def initialize_options(self):
        install.initialize_options(self)
        self.bonneville_root_dir = ROOT_DIR
        self.bonneville_config_dir = CONFIG_DIR
        self.bonneville_cache_dir = CACHE_DIR
        self.bonneville_sock_dir = SOCK_DIR
        self.bonneville_srv_root_dir = SRV_ROOT_DIR
        self.bonneville_base_file_roots_dir = BASE_FILE_ROOTS_DIR
        self.bonneville_base_pillar_roots_dir = BASE_PILLAR_ROOTS_DIR
        self.bonneville_base_master_roots_dir = BASE_MASTER_ROOTS_DIR
        self.bonneville_logs_dir = LOGS_DIR
        self.bonneville_pidfile_dir = PIDFILE_DIR

    def finalize_options(self):
        install.finalize_options(self)
        for optname in ('root_dir', 'config_dir', 'cache_dir', 'sock_dir',
                        'srv_root_dir', 'base_file_roots_dir',
                        'base_pillar_roots_dir', 'base_master_roots_dir',
                        'logs_dir', 'pidfile_dir'):
            optvalue = getattr(self, 'bonneville_{0}'.format(optname))
            if not optvalue:
                raise RuntimeError(
                    'The value of --bonneville-{0} needs a proper path value'.format(
                        optname.replace('_', '-')
                    )
                )
            setattr(self.distribution, 'bonneville_{0}'.format(optname), optvalue)

    def run(self):
        # Let's set the running_bonneville_install attribute so we can add
        # _version.py in the build command
        self.distribution.running_bonneville_install = True
        # Run install.run
        install.run(self)


NAME = 'bonneville'
VER = __version__
DESC = ('Portable, distributed, remote execution and '
        'configuration management system')

with open(BONNEVILLE_REQS) as f:
    REQUIREMENTS = [line for line in f.read().split('\n') if line]


SETUP_KWARGS = {'name': NAME,
                'version': VER,
                'description': DESC,
                'author': 'Bonneville Developers',
                'author_email': 'palehose@gmail.com',
                'url': 'https://github.com/lowsodium/bonneville',
                'cmdclass': {
                    'test': TestCommand,
                    'clean': Clean,
                    'build': Build,
                    'install': Install,
                    'sdist': SaltSdist,
                },
                'classifiers': ['Programming Language :: Python',
                                'Programming Language :: Cython',
                                'Programming Language :: Python :: 3.7',
                                'Programming Language :: Python :: 3.8',
                                'Development Status :: 5 - Production/Stable',
                                'Environment :: Console',
                                'Intended Audience :: Developers',
                                'Intended Audience :: Information Technology',
                                'Intended Audience :: System Administrators',
                                ('License :: OSI Approved ::'
                                 ' Apache Software License'),
                                'Operating System :: POSIX :: Linux',
                                'Topic :: System :: Clustering',
                                'Topic :: System :: Distributed Computing',
                                ],
                'packages': ['bonneville',
                             'bonneville.cli',
                             'bonneville.client',
                             'bonneville.client.ssh',
                             'bonneville.client.ssh.wrapper',
                             'bonneville.ext',
                             'bonneville.auth',
                             'bonneville.wheel',
                             'bonneville.tops',
                             'bonneville.grains',
                             'bonneville.modules',
                             'bonneville.pillar',
                             'bonneville.renderers',
                             'bonneville.returners',
                             'bonneville.runners',
                             'bonneville.states',
                             'bonneville.fileserver',
                             'bonneville.search',
                             'bonneville.output',
                             'bonneville.utils',
                             'bonneville.utils.validate',
                             'bonneville.roster',
                             'bonneville.log',
                             'bonneville.log.handlers',
                             ],
                'package_data': {'bonneville.modules': ['rh_ip/*.jinja']},
                'data_files': [('share/man/man1',
                                ['doc/man/bonneville-master.1',
                                 'doc/man/bonneville-key.1',
                                 'doc/man/bonneville.1',
                                 'doc/man/bonneville-cp.1',
                                 'doc/man/bonneville-call.1',
                                 'doc/man/bonneville-syndic.1',
                                 'doc/man/bonneville-run.1',
                                 'doc/man/bonneville-ssh.1',
                                 'doc/man/bonneville-minion.1',
                                 ]),
                               ('share/man/man7', ['doc/man/bonneville.7']),
                               ],
                # Required for esky builds
                'install_requires': REQUIREMENTS,
                # The dynamic module loading in bonneville.modules makes this
                # package zip unsafe. Required for esky builds
                'zip_safe': False
                }


# bbfreeze explicit includes
# Sometimes the auto module traversal doesn't find everything, so we explicitly
# add it. The auto dependency tracking especially does not work for imports
# occurring in bonneville.modules, as they are loaded at bonneville runtime.
# Specifying includes that don't exist doesn't appear to cause a freezing
# error.
FREEZER_INCLUDES = [
    'zmq.core.*',
    'zmq.utils.*',
    'ast',
    'difflib',
    'distutils',
    'distutils.version',
    'numbers',
    'json',
    'M2Crypto',
    'Cookie',
    'asyncore',
    'fileinput',
    'email',
    'email.mime.*',
]

if IS_WINDOWS_PLATFORM:
    FREEZER_INCLUDES.extend([
        'win32api',
        'win32file',
        'win32con',
        'win32com',
        'win32net',
        'win32netcon',
        'win32gui',
        'win32security',
        'ntsecuritycon',
        'pywintypes',
        'pythoncom',
        '_winreg',
        'wmi',
        'site',
    ])
    SETUP_KWARGS['install_requires'].append('WMI')
elif sys.platform.startswith('linux'):
    FREEZER_INCLUDES.append('spwd')
    try:
        import yum
        FREEZER_INCLUDES.append('yum')
    except ImportError:
        pass
elif sys.platform.startswith('sunos'):
    # (The sledgehammer approach)
    # Just try to include everything
    # (This may be a better way to generate FREEZER_INCLUDES generally)
    try:
        from bbfreeze.modulegraph.modulegraph import ModuleGraph
        mf = ModuleGraph(sys.path[:])
        for arg in glob.glob("bonneville/modules/*.py"):
                mf.run_script(arg)
        for mod in mf.flatten():
            if type(mod).__name__ != "Script" and mod.filename:
                FREEZER_INCLUDES.append(str(os.path.basename(mod.identifier)))
    except ImportError:
        pass

if HAS_ESKY:
    # if the user has the esky / bbfreeze libraries installed, add the
    # appropriate kwargs to setup
    OPTIONS = SETUP_KWARGS.get('options', {})
    OPTIONS['bdist_esky'] = {
        'freezer_module': 'bbfreeze',
        'freezer_options': {
            'includes': FREEZER_INCLUDES
        }
    }
    SETUP_KWARGS['options'] = OPTIONS

if WITH_SETUPTOOLS:
    SETUP_KWARGS['entry_points'] = {
        'console_scripts': ['bonneville-master = bonneville.scripts:bonneville_master',
                            'bonneville-minion = bonneville.scripts:bonneville_minion',
                            'bonneville-syndic = bonneville.scripts:bonneville_syndic',
                            'bonneville-key = bonneville.scripts:bonneville_key',
                            'bonneville-cp = bonneville.scripts:bonneville_cp',
                            'bonneville-call = bonneville.scripts:bonneville_call',
                            'bonneville-run = bonneville.scripts:bonneville_run',
                            'bonneville-ssh = bonneville.scripts:bonneville_ssh',
                            'bonneville = bonneville.scripts:bonneville_main'
                            ],
    }

    # Required for running the tests suite
    SETUP_KWARGS['dependency_links'] = [
        'https://github.com/lowsodium/bonneville-testing/tarball/develop#egg=SaltTesting'
    ]
    SETUP_KWARGS['tests_require'] = ['SaltTesting']
else:
    SETUP_KWARGS['scripts'] = ['scripts/bonneville-master',
                               'scripts/bonneville-minion',
                               'scripts/bonneville-syndic',
                               'scripts/bonneville-key',
                               'scripts/bonneville-cp',
                               'scripts/bonneville-call',
                               'scripts/bonneville-run',
                               'scripts/bonneville-ssh',
                               'scripts/bonneville']

if __name__ == '__main__':
    setup(**SETUP_KWARGS)
